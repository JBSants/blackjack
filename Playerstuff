typedef struct node_player {
    Player player;
    struct node_player *next;
} Node_player;

add(node_player** head, Player data){
	if(empty(*head))
		return NOP_STAT;	
	
	new_node=create_node(data);
	if(empty(new_node)){
		ERROR_MESSAGE;
		exit(EXIT_FAILURE);
	}
	
	new_node->next=*head;
	new_node->payload=data;
	*head=new_node;
	return ACT_STAT;
}


insert_anywhere(Node_player** head,Player data,int position){
	Node_player* curr=*head;
	if( !empty(curr)){
		if(position<0)
			return NOP_STAT;
		
		new_node=create_node(data);
		if(empty(new_node)) {
		  ERROR_MESSAGE;
      		  exit(EXIT_FAILURE);
    }

		if(position==0){
			new_node->payload=data;
			new_node->next=*head;
			*head=new_node;
		}
		for(int i=1;i<position && curr!=NULL;i++){
			curr=curr->next;
		}
		if(empty(curr)){
			free(new_node);
			return NOP_STAT;
		}
		
		new_node->next=curr->next;
		new_node->payload=data;
		curr->next=new_node;
		return ACT_STAT;	
	}
	return EMPTY_STAT
}

take_node(Node_player** head,int position){
	Node_player *tmp;
	Node_player *curr=*head;
	
    if(!empty(curr)) {
        if(position < 0)
            return NULL;
        else if(position == 0) {
            *head = curr->next;
            curr->next = NULL;
            return curr;
        }

        for(int i=1; i < position && curr != NULL; i++)
            curr=curr->next;

        if(empty(curr)) {
            return NULL;
        }

        tmp = curr->next;
        curr->next = curr->next->next;
        tmp->next = NULL;

        return tmp;
    }

    return NULL;
}

join_node(Node_player** head,Node_player* jointo,int position){
	Node_player* curr=*head;
	if(!empty(curr)) {

		if(position < 0) {
			return NOP_STAT;
		} else if(position == 0){
			jointo->next = *head;
			*head = jointo;
			return ACT_STAT;
		}

		for(int i=1; i < position && curr != NULL; i++)
			curr=curr->next;

		if(empty(curr)) {
			return NOP_STAT;
		}

		jointo->next = curr->next;
		curr->next = jointo;
	} else {
		*head = jointo;
		return ACT_STAT;
	}

	return WARN_STAT;
}

create_node(Player data){
	Node_player * new_node=malloc(sizeof(node_player));
	
	if(empty(new_node)) {
        	ERROR_MESSAGE;
        	exit(EXIT_FAILURE);
    	}

    return new_node;
}

eraselist(Node_player* head){
	Node_player* tmp
	while((tmp=head)!=NULL){
		head=head->next;
		free(tmp);
	}
}

