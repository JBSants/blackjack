GameSettings(char config_file[],char ai[]){
	FILE* game_file, *ai_strategy;
	node_player* aux,*last;
	int players,decks,player_type[4],player_name[4][8],init_money[4],init_bet[4],err;
	
	game_file=fopen(config_file,"r");
	if(game_file==NULL){
		printf("Error opening configuration file!\n");		
		exit();	
	}
	ai_strategy=fopen(ai,"r");	
	if(ai_strategy==NULL){
		printf("Error opening AI strategy file!\n");
		exit();
	}
	
	err=fscanf(game_file,"%d-%d" &decks,&players);
	if(err!=2 || decks<4 || decks>8 || players<1 || players>4){
		printf("Not valid players or deck parameters!\n");
		exit();
	}
	
	for(int i=0;i<players;i++){
		err=fscanf(game_file,"%s-%s-%f-%f", &player_type[i],&player_name[i],&init_money[i],&init_bet[i]);
		if(err!=4 || (player_type[i][0]!='H' || player_type[i][1]!='U') && (player_type[i][0]!='E' || player_type[i][1]!='A') ||  init_money[i]<10 || init_money[i]>500 || init_bet[i]<2 || init_bet[i]>0.25*init_money[i] ){
			printf("Not valid player parameters format or value!\n");
			exit();
		}
	}
	
	node_player* head =malloc(players*sizeof(node_player));
	last=head+(players-1);
	last->next=NULL;

	if(head==NULL){
		printf("Not able to alocate memory!");
		exit();
	}

	aux=head;
	while(aux!=NULL){
		for(int i=0;i<8;i++)	
			aux->player.name[i]=player_name[cnt][i];
		
		if(player_type[cnt][0]=='H')
			aux->player.ai=0;
		else 
			aux->player.ai=1;
		
		aux->player.money=init_money[cnt];
		aux->player.bet=init_bet[cnt];

		cnt++;
		if(aux->next!=NULL)
			aux->next=aux+1;
		aux=aux->next;
	}


}
